import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import plotly_express as px

st.set_page_config(page_title="Exploration et visualisation", page_icon="üìä")
st.sidebar.header("Exploration et visualisation")
st.sidebar.info("Auteurs : \n\n - Isabelle EVRARD [Linkedin](https://www.linkedin.com/in/isabelle-evrard-82a6b2253/) \n\n - Anthony LEBRET [Linkedin](https://linkedin.com/in/anthony-lebret-a7aabb176)")
st.sidebar.info("Formation DataScientist Novembre 2022, [DataScientest](https://datascientest.com/)")
st.sidebar.info("Donn√©es : [Site de l'Agence europ√©enne pour l'environnement](https://www.eea.europa.eu/data-and-maps/data/co2-cars-emission-22)")

# Cacher "Made with Streamlit"
hide_footer_style = """ 
    <style>
    footer {visibility: hidden; }
    </style>
    """
st.markdown(hide_footer_style, unsafe_allow_html=True)

# Image CO2
from PIL import Image
image = Image.open('Streamlit/CO2_wide.jpg')
st.image(image)

st.title('Data exploration et visualisation')
    
st.write("Les donn√©es utilis√©es pour la visualisation regroupent les v√©hicules neufs acquis par au moins une personne en France en 2019. Contrairement au dataset principal, les v√©hicules de tous types ont √©t√© conserv√©s, c‚Äôest √† dire les v√©hicules ne rejetant pas de CO‚ÇÇ (√©lectrique, hydrog√®ne) ainsi que les v√©hicules aux carburants rares.")
    
# lecture du datasets "cars" √† partir du jeu de donn√©es source en supprimant les doublons sur un identifiant v√©hicule.
cars = pd.read_csv('data/cars_FR2019.csv', dtype={'Cn': 'str', 'IT': 'str'},index_col=0)
    
# Cr√©ation des DataFrames "cars_viz" et "parc_viz" et suppression des v√©hicules avec type de carburant inconnu
cars_viz = cars[(cars['Ft']!='unknown')]

# Cr√©ation de la variable d'√©mission moyenne de CO2 (norme WLTP) par type de carburant
moy_CO2_wltp = cars_viz['Ewltp (g/km)'].groupby(cars_viz['Ft']).mean()
    
# Cr√©ation des variables type_cars et type_parc : nombre de v√©hicules par type de carburant (en %)
type_cars = cars_viz['Ft'].value_counts(normalize=1)
type_cars *= 100
type_cars = type_cars.sort_index()
    
# Remplacement du nom des modalit√©s de la variable 'Fm'
cars_viz['Fm'] = cars_viz['Fm'].replace(('M', 'H', 'P', 'B', 'F'), ('Mono-fuel', 'Hybrid not off-charged',
                                                                    'Hybrid off-charged', 'Bi-fuel', 'Flex-fuel'))

# Renommer les variables pour la lisibilit√© des graphiques
viz_rename = {'m (kg)': 'Masse',
              'ec (cm3)': 'Cylindr√©e',
              'ep (KW)': 'Puissance moteur',
              'Ewltp (g/km)': 'Emissions de CO2',
              'W (mm)': 'Empattement',
              'At1 (mm)': "Largeur de voie essieu dir.",
              'At2 (mm)': "Largeur de voie autre essieu"}
cars_viz = cars_viz.rename(viz_rename,axis=1)
    

### Graphique 1
st.subheader('Graphique 1 : Emissions de CO‚ÇÇ en fonction du type de carburant')
st.write("Cette premi√®re visualisation met en √©vidence la disparit√© du taux d‚Äô√©mission de CO‚ÇÇ entre les diff√©rents types de carburants.")
    
fig = px.bar(x=moy_CO2_wltp.index, y=moy_CO2_wltp.values, color=moy_CO2_wltp.index,
             color_discrete_sequence=px.colors.qualitative.Plotly,
             labels={'x':'Type de carburant', 'y':'Emission moyenne de CO2 (g/km)', 'color':'Type de carburant'},
             text_auto='.3s')
st.plotly_chart(fig)

with st.expander("Voir/Cacher la description"):
    st.write("- Les v√©hicules roulant au carburant E85, √©galement appel√© super√©thanol (un m√©lange constitu√© de biocarburant, d‚Äô√©thanol et d'essence SP95) rejette beaucoup plus de CO‚ÇÇ que des v√©hicules roulant au gaz naturel -ng- par exemple.")
    st.write("- Les v√©hicules diesel et essence (‚Äúpetrol‚Äù), qui constituent la majorit√© des v√©hicules du dataset, √©mettent une quantit√© similaire de CO‚ÇÇ.")
    st.write("- Les v√©hicules hybrides diesel/√©lectrique sont ceux qui rejettent le moins de CO‚ÇÇ suivis par les v√©hicules hybrides essence/√©lectrique.")
    
### Graphique 2
st.subheader('Graphique 2 : Proportion des diff√©rents types de carburants')
st.write("Ce diagramme en barre pr√©sente les proportions des diff√©rents types de carburants, et expose un d√©s√©quilibre au sein du dataset.")
    
fig = px.bar(x=type_cars.values, y=type_cars.index, orientation='h', color=type_cars.index,
             color_discrete_sequence=px.colors.qualitative.Plotly,
             labels={'x':' ', 'y':'Type de carburant', 'color':'Type de carburant'})
fig.update_layout(xaxis = dict(tickvals = [0, 10, 20, 30, 40, 50, 60],
                               ticktext = ['0%', '10%', '20%', '30%', '40%', '50%', '60%']))
st.plotly_chart(fig)

with st.expander("Voir/Cacher la description"):
    st.write("- Les v√©hicules diesel et essence (‚Äúpetrol‚Äù) sont largement repr√©sent√©s (plus de 97%).")
    st.write("- Certains types de carburant sont tr√®s rares : les v√©hicules aliment√©s √† l‚Äôhydrog√®ne, au super√©thanol (E85), au gaz naturel (ng), au m√©lange gaz naturel-biom√©thane (ng-biomethane), au gaz de p√©trole liqu√©fi√© (lpg), ainsi que les v√©hicules diesel/√©lectrique repr√©sentent une tr√®s faible proportion du jeu de donn√©es (<0.4% tous types de carburant cumul√©s).")
    st.write("- Les v√©hicules √©lectriques repr√©sentent moins de 1% du dataset, et seront retir√©s dans la partie pre-processing (ne servent pas √† la mod√©lisation puisqu‚Äôils ne rejettent pas de CO‚ÇÇ).")

# Suppression des v√©hicules √©lectriques et hydrog√®nes (ne rejettent pas de CO‚ÇÇ)
cars_viz = cars_viz[(cars_viz['Ft']!='electric') & (cars_viz['Ft']!='hydrogen') & (cars_viz['Ft']!='unknown')]

# Graphique 3
st.subheader("Graphique 3 : Boxplot des √©missions de CO‚ÇÇ en fonction du mode de carburation")
st.write("Cette visualisation en bo√Ætes √† moustache (boxplot) des √©missions de CO‚ÇÇ en fonction du mode de carburation apporte plusieurs informations compl√©mentaires aux graphiques pr√©c√©dents.")
fig = px.box(x=cars_viz['Fm'], y=cars_viz['Emissions de CO2'], labels={'x':' ', 'y':'Emissions de CO‚ÇÇ (g/km)', 'color':'Mode de carburation'}, color=cars_viz['Fm'], boxmode="overlay")
st.plotly_chart(fig)

with st.expander("Voir/Cacher la description"):
    st.write("- La cat√©gorie de v√©hicules fonctionnant avec un unique carburant (‚Äúmono-fuel‚Äù) pr√©sente de nombreuses valeurs au-del√† des moustaches : ces valeurs ne sont pas aberrantes et sont associ√©es √† des v√©hicules tr√®s puissants (type ‚Äúsupercar‚Äù).")
    st.write("- Le corps des boxplots (m√©dianes et quartiles) met en lumi√®re une √©mission de CO‚ÇÇ plus √©lev√©e pour les v√©hicules hybrides non rechargeables (‚Äúhybrid not off-charged‚Äù), comparativement aux v√©hicules mono-fuel ou bi-fuel.")
    st.write("- Les v√©hicules de type flex-fuel ont la m√©diane la plus √©lev√©e et les v√©hicules hybrides rechargeables (‚Äúhybrid off-charged‚Äù) ont la m√©diane la plus faible.")

# Cr√©ation de la variable moy_CO2_mk : Emission moyenne de CO2 par marque de v√©hicule
moy_CO2_mk = cars_viz['Emissions de CO2'].dropna().groupby(cars_viz['Mk']).mean()

# Graphique 4
st.subheader("Graphique 4 : Diagramme √† barres des √©missions de CO‚ÇÇ moyennes selon les marques de v√©hicule")
st.write("Ce diagramme en barre repr√©sente l‚Äô√©mission moyenne de CO‚ÇÇ en fonction des marques de v√©hicule du dataset. Les marques de v√©hicules √©lectriques ont √©t√© retir√©es car ne rejettent pas de CO‚ÇÇ (ex : Tesla).")
fig = px.bar(x=moy_CO2_mk.index, y=moy_CO2_mk.values, labels={'x':' ', 'y':'Emission de CO‚ÇÇ moyenne (g/km)', 'color':'CO‚ÇÇ (g/km)'}, color=moy_CO2_mk.values)
st.plotly_chart(fig)

with st.expander("Voir/Cacher la description"):
    st.write("- La plus grande partie des marques pr√©sente un taux d‚Äô√©mission de CO‚ÇÇ moyen aux alentours de ~140 √† ~180 g/km.")
    st.write("- Certains pics sont bien plus importants : les marques Aston Martin, Bentley, Ferrari, Lamborghini, Maserati, McLaren, Mercedes AMG ou encore Rolls-Royce pr√©sentent un taux d‚Äô√©mission moyen beaucoup plus important compris entre ~280 et ~380 g/km.")
    st.write("- Deux pics sont tr√®s faibles : la marque BMW i (ou BMW I), dispose du plus faible taux d‚Äô√©mission de CO‚ÇÇ moyen. En effet, BMW i est une filiale du groupe BMW consacr√©e aux v√©hicules hybrides et √©lectriques.")

# Graphique 5
st.subheader("Graphique 5 : Corr√©lation par paire entre les variables de masse, cylindr√©e, puissance moteur, largeur de voies d‚Äôessieux, d‚Äôempattement et d‚Äô√©missions de CO‚ÇÇ")
st.write("Cette carte de chaleur (ou heatmap) √©tablit une corr√©lation par paire des caract√©ristiques techniques (variables continues) des v√©hicules du dataset, par la m√©thode de Pearson.")

fig = px.imshow(cars_viz[['Emissions de CO2','Puissance moteur','Cylindr√©e','Masse',
                          'Largeur de voie essieu dir.','Largeur de voie autre essieu',
                          'Empattement']].corr(), text_auto='.2f', aspect='auto', labels={'color':' '})
st.plotly_chart(fig)

with st.expander("Voir/Cacher la description"):
    st.write("- En s‚Äôint√©ressant aux corr√©lations avec notre variable cible (√©missions de CO‚ÇÇ), on s‚Äôaper√ßoit que la relation est mod√©r√©e voire faible avec les variables d‚Äôempattement et de largeur de voies d‚Äôessieux (respectivement 0.46 et 0.58).")
    st.write("- La d√©pendance est plus forte avec la variable de masse des v√©hicules (0.68), et les variables de puissance moteur et de cylindr√©e montrent la plus forte d√©pendance avec la variable cible (respectivement 0.70 et 0.71).")
    st.write("- La d√©pendance est tr√®s importante (0.99) entre les deux variables de largeur de voies d‚Äôessieux. Cette relation s‚Äôexplique notamment par le fait que 84,5% des valeurs de ces variables sont identiques.")

